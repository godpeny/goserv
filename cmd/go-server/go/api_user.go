/*
 * Goserver in Open API
 *
 * server template in GO.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/rs/zerolog/log"

	ent_client "github.com/godpeny/goserv/internal/clients/ent"
)

// CreateUser - create user
func CreateUser(c *gin.Context) {
	ctx := context.Background()
	req := &V1User{}

	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// db
	client, err := ent_client.GetClient()
	if err != nil {
		log.Error().Msgf("error from CreateUser get ent client %s", err)
	}

	_, err = client.User.Create().SetAge(int(req.Age)).SetName(req.Name).Save(ctx)
	if err != nil {
		log.Error().Interface("CreateUser", req).Msgf("error from CreateUser db %s", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{})
}

// DeleteUser - Delete user
func DeleteUser(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetUserByName - Get user by user name
func GetUserByName(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ListUser - list users
func ListUser(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateUser - Updated user
func UpdateUser(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
