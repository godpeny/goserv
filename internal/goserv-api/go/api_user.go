/*
 * Goserver in Open API
 *
 * server template in GO.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"

	"github.com/gin-gonic/gin"

	ent "github.com/godpeny/goserv/ent"
	db "github.com/godpeny/goserv/internal/goserv-db"
)

// CreateUser - create user
func CreateUser(c *gin.Context) {
	req := &ent.User{}

	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, handleResponse(c, req, "CREATE"))
}

// DeleteUser - Delete user
func DeleteUser(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetUserByName - Get user by user name
func GetUserByName(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ListUser - list users
func ListUser(c *gin.Context) {
	req := &ent.User{}

	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, handleResponse(c, req, "READ"))
}

// UpdateUser - Updated user
func UpdateUser(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

func handleResponse(c *gin.Context, req *ent.User, crud string) string {
	db.RunMQ_User(crud, *req, c)
	res := <-db.APIc

	return string(res)
}
