/*
 * sample
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Response struct for Response
type Response struct {
	Num string `json:"num"`
	Target string `json:"target"`
	Type string `json:"type"`
	Name string `json:"name"`
	Etc string `json:"etc"`
}

// NewResponse instantiates a new Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponse(num string, target string, type_ string, name string, etc string, ) *Response {
	this := Response{}
	this.Num = num
	this.Target = target
	this.Type = type_
	this.Name = name
	this.Etc = etc
	return &this
}

// NewResponseWithDefaults instantiates a new Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseWithDefaults() *Response {
	this := Response{}
	return &this
}

// GetNum returns the Num field value
func (o *Response) GetNum() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Num
}

// GetNumOk returns a tuple with the Num field value
// and a boolean to check if the value has been set.
func (o *Response) GetNumOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Num, true
}

// SetNum sets field value
func (o *Response) SetNum(v string) {
	o.Num = v
}

// GetTarget returns the Target field value
func (o *Response) GetTarget() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *Response) GetTargetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *Response) SetTarget(v string) {
	o.Target = v
}

// GetType returns the Type field value
func (o *Response) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Response) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Response) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *Response) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Response) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Response) SetName(v string) {
	o.Name = v
}

// GetEtc returns the Etc field value
func (o *Response) GetEtc() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Etc
}

// GetEtcOk returns a tuple with the Etc field value
// and a boolean to check if the value has been set.
func (o *Response) GetEtcOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Etc, true
}

// SetEtc sets field value
func (o *Response) SetEtc(v string) {
	o.Etc = v
}

func (o Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["num"] = o.Num
	}
	if true {
		toSerialize["target"] = o.Target
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["etc"] = o.Etc
	}
	return json.Marshal(toSerialize)
}

type NullableResponse struct {
	value *Response
	isSet bool
}

func (v NullableResponse) Get() *Response {
	return v.value
}

func (v *NullableResponse) Set(val *Response) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse(val *Response) *NullableResponse {
	return &NullableResponse{value: val, isSet: true}
}

func (v NullableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


