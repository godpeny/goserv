// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/godpeny/goserv/ent/apiresponse"
	"github.com/godpeny/goserv/ent/predicate"
)

// APIResponseUpdate is the builder for updating APIResponse entities.
type APIResponseUpdate struct {
	config
	hooks    []Hook
	mutation *APIResponseMutation
}

// Where adds a new predicate for the builder.
func (aru *APIResponseUpdate) Where(ps ...predicate.APIResponse) *APIResponseUpdate {
	aru.mutation.predicates = append(aru.mutation.predicates, ps...)
	return aru
}

// SetCode sets the code field.
func (aru *APIResponseUpdate) SetCode(i int) *APIResponseUpdate {
	aru.mutation.ResetCode()
	aru.mutation.SetCode(i)
	return aru
}

// AddCode adds i to code.
func (aru *APIResponseUpdate) AddCode(i int) *APIResponseUpdate {
	aru.mutation.AddCode(i)
	return aru
}

// SetType sets the type field.
func (aru *APIResponseUpdate) SetType(s string) *APIResponseUpdate {
	aru.mutation.SetType(s)
	return aru
}

// SetNillableType sets the type field if the given value is not nil.
func (aru *APIResponseUpdate) SetNillableType(s *string) *APIResponseUpdate {
	if s != nil {
		aru.SetType(*s)
	}
	return aru
}

// SetMessage sets the message field.
func (aru *APIResponseUpdate) SetMessage(s string) *APIResponseUpdate {
	aru.mutation.SetMessage(s)
	return aru
}

// SetNillableMessage sets the message field if the given value is not nil.
func (aru *APIResponseUpdate) SetNillableMessage(s *string) *APIResponseUpdate {
	if s != nil {
		aru.SetMessage(*s)
	}
	return aru
}

// Mutation returns the APIResponseMutation object of the builder.
func (aru *APIResponseUpdate) Mutation() *APIResponseMutation {
	return aru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *APIResponseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aru.hooks) == 0 {
		if err = aru.check(); err != nil {
			return 0, err
		}
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aru.check(); err != nil {
				return 0, err
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *APIResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *APIResponseUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *APIResponseUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *APIResponseUpdate) check() error {
	if v, ok := aru.mutation.Code(); ok {
		if err := apiresponse.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	return nil
}

func (aru *APIResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apiresponse.Table,
			Columns: apiresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: apiresponse.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: apiresponse.FieldCode,
		})
	}
	if value, ok := aru.mutation.AddedCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: apiresponse.FieldCode,
		})
	}
	if value, ok := aru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apiresponse.FieldType,
		})
	}
	if value, ok := aru.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apiresponse.FieldMessage,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiresponse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// APIResponseUpdateOne is the builder for updating a single APIResponse entity.
type APIResponseUpdateOne struct {
	config
	hooks    []Hook
	mutation *APIResponseMutation
}

// SetCode sets the code field.
func (aruo *APIResponseUpdateOne) SetCode(i int) *APIResponseUpdateOne {
	aruo.mutation.ResetCode()
	aruo.mutation.SetCode(i)
	return aruo
}

// AddCode adds i to code.
func (aruo *APIResponseUpdateOne) AddCode(i int) *APIResponseUpdateOne {
	aruo.mutation.AddCode(i)
	return aruo
}

// SetType sets the type field.
func (aruo *APIResponseUpdateOne) SetType(s string) *APIResponseUpdateOne {
	aruo.mutation.SetType(s)
	return aruo
}

// SetNillableType sets the type field if the given value is not nil.
func (aruo *APIResponseUpdateOne) SetNillableType(s *string) *APIResponseUpdateOne {
	if s != nil {
		aruo.SetType(*s)
	}
	return aruo
}

// SetMessage sets the message field.
func (aruo *APIResponseUpdateOne) SetMessage(s string) *APIResponseUpdateOne {
	aruo.mutation.SetMessage(s)
	return aruo
}

// SetNillableMessage sets the message field if the given value is not nil.
func (aruo *APIResponseUpdateOne) SetNillableMessage(s *string) *APIResponseUpdateOne {
	if s != nil {
		aruo.SetMessage(*s)
	}
	return aruo
}

// Mutation returns the APIResponseMutation object of the builder.
func (aruo *APIResponseUpdateOne) Mutation() *APIResponseMutation {
	return aruo.mutation
}

// Save executes the query and returns the updated entity.
func (aruo *APIResponseUpdateOne) Save(ctx context.Context) (*APIResponse, error) {
	var (
		err  error
		node *APIResponse
	)
	if len(aruo.hooks) == 0 {
		if err = aruo.check(); err != nil {
			return nil, err
		}
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aruo.check(); err != nil {
				return nil, err
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			mut = aruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *APIResponseUpdateOne) SaveX(ctx context.Context) *APIResponse {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *APIResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *APIResponseUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *APIResponseUpdateOne) check() error {
	if v, ok := aruo.mutation.Code(); ok {
		if err := apiresponse.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	return nil
}

func (aruo *APIResponseUpdateOne) sqlSave(ctx context.Context) (_node *APIResponse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apiresponse.Table,
			Columns: apiresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: apiresponse.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing APIResponse.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := aruo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: apiresponse.FieldCode,
		})
	}
	if value, ok := aruo.mutation.AddedCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: apiresponse.FieldCode,
		})
	}
	if value, ok := aruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apiresponse.FieldType,
		})
	}
	if value, ok := aruo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apiresponse.FieldMessage,
		})
	}
	_node = &APIResponse{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apiresponse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
