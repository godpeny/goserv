// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/godpeny/goserv/ent/apiresponse"
)

// APIResponseCreate is the builder for creating a APIResponse entity.
type APIResponseCreate struct {
	config
	mutation *APIResponseMutation
	hooks    []Hook
}

// SetCode sets the code field.
func (arc *APIResponseCreate) SetCode(i int) *APIResponseCreate {
	arc.mutation.SetCode(i)
	return arc
}

// SetType sets the type field.
func (arc *APIResponseCreate) SetType(s string) *APIResponseCreate {
	arc.mutation.SetType(s)
	return arc
}

// SetNillableType sets the type field if the given value is not nil.
func (arc *APIResponseCreate) SetNillableType(s *string) *APIResponseCreate {
	if s != nil {
		arc.SetType(*s)
	}
	return arc
}

// SetMessage sets the message field.
func (arc *APIResponseCreate) SetMessage(s string) *APIResponseCreate {
	arc.mutation.SetMessage(s)
	return arc
}

// SetNillableMessage sets the message field if the given value is not nil.
func (arc *APIResponseCreate) SetNillableMessage(s *string) *APIResponseCreate {
	if s != nil {
		arc.SetMessage(*s)
	}
	return arc
}

// Mutation returns the APIResponseMutation object of the builder.
func (arc *APIResponseCreate) Mutation() *APIResponseMutation {
	return arc.mutation
}

// Save creates the APIResponse in the database.
func (arc *APIResponseCreate) Save(ctx context.Context) (*APIResponse, error) {
	var (
		err  error
		node *APIResponse
	)
	arc.defaults()
	if len(arc.hooks) == 0 {
		if err = arc.check(); err != nil {
			return nil, err
		}
		node, err = arc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = arc.check(); err != nil {
				return nil, err
			}
			arc.mutation = mutation
			node, err = arc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(arc.hooks) - 1; i >= 0; i-- {
			mut = arc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (arc *APIResponseCreate) SaveX(ctx context.Context) *APIResponse {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (arc *APIResponseCreate) defaults() {
	if _, ok := arc.mutation.GetType(); !ok {
		v := apiresponse.DefaultType
		arc.mutation.SetType(v)
	}
	if _, ok := arc.mutation.Message(); !ok {
		v := apiresponse.DefaultMessage
		arc.mutation.SetMessage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *APIResponseCreate) check() error {
	if _, ok := arc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if v, ok := arc.mutation.Code(); ok {
		if err := apiresponse.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if _, ok := arc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := arc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New("ent: missing required field \"message\"")}
	}
	return nil
}

func (arc *APIResponseCreate) sqlSave(ctx context.Context) (*APIResponse, error) {
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (arc *APIResponseCreate) createSpec() (*APIResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &APIResponse{config: arc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: apiresponse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: apiresponse.FieldID,
			},
		}
	)
	if value, ok := arc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: apiresponse.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := arc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apiresponse.FieldType,
		})
		_node.Type = value
	}
	if value, ok := arc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apiresponse.FieldMessage,
		})
		_node.Message = value
	}
	return _node, _spec
}

// APIResponseCreateBulk is the builder for creating a bulk of APIResponse entities.
type APIResponseCreateBulk struct {
	config
	builders []*APIResponseCreate
}

// Save creates the APIResponse entities in the database.
func (arcb *APIResponseCreateBulk) Save(ctx context.Context) ([]*APIResponse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*APIResponse, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APIResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (arcb *APIResponseCreateBulk) SaveX(ctx context.Context) []*APIResponse {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
